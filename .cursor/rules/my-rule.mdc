---
description: 
globs: 
alwaysApply: true
---
---
description: プロジェクトの進捗管理ルール
globs:
alwaysApply: true
---

# ルール確認方法
新しいセッション開始時に「ルール確認」と入力してください。


# 進捗管理ルール

## 1. タスク進捗の記録
- ファイル: `docs/sub/progress/task_progress.md`
- 記録内容:
  - タスクのステータス（🔄進行中、✅完了、⏳待機中、❌問題発生）
  - ブランチ名
  - 開始・完了日
  - 作業内容の要約
  - 次のタスクへの引き継ぎ事項
- 更新タイミング:
  - 新しいブランチ作成時
  - PR作成時
  - タスク完了時
  - 重要な進捗があった時

## 2. トラブルシューティング
- ファイル: `docs/sub/troubleshooting.md`
- 記録内容:
  - 発生タスク
  - 発生環境（OS/Node.jsバージョンなど）
  - 問題の詳細（エラーメッセージ、発生状況、再現手順）
  - 原因
  - 解決方法
  - 予防策
  - 参考リンク
- 更新タイミング:
  - 問題が発生した時
  - 解決策が見つかった時
  - 予防策が分かった時

## 3. 開発フェーズの遵守
- ファイル: `docs/guide/development_phases.md`に基づいてタスクを進める
- 各フェーズの順序を守りながら開発を進める
- フェーズ間の依存関係を考慮する

## 4. 進捗管理の自動化
- AIアシスタントが進捗を自動的に記録
- タスクの開始・完了時にステータスを更新
- 問題発生時にトラブルシューティングに記録
- 新しい会話セッション開始時にこのルールを参照

## 5. GitHub運用ルール

### 5.1 ブランチ管理
- ブランチ命名規則: `feature/phase{番号}/{機能名}`
  - 例: `feature/phase1/setup-env`
- ブランチ作成時のルール:
  - 開発フェーズに基づいて作成
  - 機能ごとに分離
  - 依存関係を考慮

### 5.2 PRとマージ
- PR作成ルール:
  - 機能開発完了時に作成
  - 変更内容を明確に記述
  - 関連するIssue番号を記載
- マージルール:
  - コンフリクトがなければ直接マージ可能
  - テストが通っていることを確認
  - 必要に応じてレビューを実施

### 5.3 コミットメッセージ
```
<type>(<scope>): <subject>

<body>

<footer>
```
- type: feat, fix, docs, style, refactor, test, chore
- scope: 変更の影響範囲
- subject: 変更内容の要約
- body: 変更の詳細
- footer: 関連するIssue番号

### 5.4 開発自動化フロー

#### タスク開始時
1. ブランチ作成
   - 開発フェーズに基づいて自動的にブランチ名を生成
   - 例: `feature/phase1/setup-env`
   - ブランチの作成と切り替えを自動実行

2. 進捗記録の開始
   - `task_progress.md`にタスク開始を記録
   - ステータスを🔄進行中に設定
   - 開始日時を記録

#### 開発中
1. 進捗の自動記録
   - 重要なマイルストーン達成時に進捗を更新
   - 問題発生時は`troubleshooting.md`に記録

2. コミット管理
   - 変更内容に応じて適切なコミットメッセージを提案
   - コミットの粒度を適切に管理

#### タスク完了時
1. PRの自動作成
   - 変更内容の要約を自動生成
   - 関連するIssue番号を自動リンク
   - レビューコメントのテンプレートを提供

2. 進捗記録の更新
   - ステータスを✅完了に更新
   - 完了日時を記録
   - 次のタスクへの引き継ぎ事項を記録


   